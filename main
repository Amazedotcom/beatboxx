ackage Beatb;

import java.awt.*;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Reader;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Vector;

import javax.sound.midi.*;
import javax.swing.*;


public class BeatBox {
	JFrame theFrame ;
	JPanel mainPanel;
	JList Incominglist;
	JTextField userMessage;
	ArrayList<JCheckBox> checkboxlist;
	int nextnum;
	Vector <String> listVector = new Vector<String>();
	String username ;
	ObjectOutputStream out;
	ObjectInputStream in;
	HashMap<String ,boolean[] >otherSeqsMap = new HashMap<String , boolean[] > ();
	
	Sequencer sequencer ;
	Sequence sequence ;
	Sequence mySequence = null;
	Track track;
	
	
	
	String[] instrumentsName  = {
			"Bass Drum", "Closed Hi-Hat", "Open Hi-Hat","Acoustic Snare", "Crash Cymbal", "Hand Clap", "High Tom", "H i Bongo", "Maracas", "Whistle",
			"Low Conga", "Cowbell", "Vibraslap", "Low-mid Tom", "High Aqogo", "Open Hi Conga"};
	
	
	int[] instruments = {35, 42,46,38,49,50,60,20,72,64,11,80,42,13,60,47};

	public static void main(String[] args) {
		//new BeatBox().startUp(args[0]);
		new BeatBox().startUp("a");
	}
	public void startUp(String name ) {
		username = name ;
		try {
			Socket sock = new Socket("127.0.0.1" , 4242);
			out = new ObjectOutputStream(sock.getOutputStream());
			in = new ObjectInputStream(sock.getInputStream());
			//Thread remote = new Thread (new RemoteReader());
			//remote.start();
			
			
		}catch(Exception ex){
			System.out.println("coudent connect ");
		}
		setUpMidi();
		buildGui();
				
	}
	
	public void buildGui() {
		
		
		theFrame = new JFrame("Cyber BeatBox");
		BorderLayout layout = new BorderLayout() ;
		JPanel background = new JPanel(layout) ;
		background.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
		
		
		checkboxlist = new ArrayList<JCheckBox>() ;
		Box buttonBox = new Box(BoxLayout.Y_AXIS);
		JButton start = new JButton("Start");
		start.addActionListener(new MyStartListener());
		buttonBox.add(start);
		
		JButton stop = new JButton("Stop") ;
		stop.addActionListener(new MyStopListener());
		buttonBox.add(stop);
		
		JButton upTempo = new JButton("Tempo Up");
		upTempo.addActionListener(new MyUpTempoListener());
		buttonBox.add(upTempo);
		
		JButton downTempo = new JButton("Tempo Down") ;
		downTempo.addActionListener(new MyDownTempoListener());
		buttonBox.add(downTempo) ;
		
		JButton sendlt = new JButton("sendIt");
		sendlt.addActionListener(new MySendListener());
		buttonBox.add(sendlt);
		
		userMessage = new JTextField();
		buttonBox.add(userMessage);
		
		
		Incominglist = new JList();
		Incominglist.addListSelectionListener(new MyListSelectionListener());
		Incominglist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		JScrollPane thelist = new JScrollPane(Incominglist);
		buttonBox.add(thelist);
		Incominglist.setListData(listVector);
		
		
		Box namaBox = new Box (BoxLayout.Y_AXIS) ;
		
				for (int i = 0; i < 16; i++) {
				      Track nameBox;
				       namaBox.add(new Label(instrumentsName [i])) ;
				}
				
				background.add (BorderLayout .EAST , buttonBox) ;
				
				background.add (BorderLayout. WEST, namaBox);
				
				
				theFrame.getContentPane().add(background) ;
				
				GridLayout grid =  new GridLayout(16,16);
				
				grid.setVgap (1) ;
				
				grid.setHgap(2);
					
				mainPanel = new JPanel (grid) ;
					
				background.add(BorderLayout. CENTER, mainPanel);
				
				for (int i = 0; i < 256; i++) {
					JCheckBox c = new JCheckBox () ;
					 c.setSelected(false);
					 checkboxlist.add(c) ;
					 mainPanel.add(c) ;
				}
				
				
				
				theFrame.setBounds(50,50,300,300);
				theFrame .pack () ;
				theFrame.setVisible(true);
	}
				
	public void setUpMidi (){
	        try {
	             sequencer = MidiSystem .getSequencer () ;
	                   sequencer.open();
	sequence = new Sequence (Sequence.PPQ,4) ;
	track = sequence.createTrack();
	sequencer.setTempoInBPM(120);
	
	
	}catch(Exception e) {
		e.printStackTrace();
	
	}
	        
	}
	
	public void buildTrackAndStart() {
		ArrayList<Integer> trackList = null ;
		sequence .deleteTrack(track);
		track = sequence.createTrack();
	
        
		for(int i = 0 ; i < 16 ; i++) {
			trackList = new ArrayList<Integer>();
			
			for(int j = 0 ; j < 16 ; j++) {
				JCheckBox jc = (JCheckBox) checkboxlist.get(j + (16*i));
				if (jc.isSelected()) {
						int key = instruments[i];
						trackList.add(new Integer(key));
			}else {
				trackList.add(null);
			}
		}
			makeTracks(trackList);
		}	
		track.add(makeEvent(192,9,1,0,15));
		try {
			sequencer.setSequence(sequence);
			sequencer . setLoopCount (sequencer. LOOP_CONTINUOUSLY) ;
			sequencer .start();
			sequencer.setTempoInBPM(120);
			} catch(Exception e) {
				e.printStackTrace();
			
			}

		}
	
	
	//Listener classes 
	public class MyStartListener implements ActionListener {
	    public void actionPerformed(ActionEvent a) {
	                  buildTrackAndStart() ;
	    }
	}

	public class MyStopListener implements ActionListener{
	         public void actionPerformed(ActionEvent a) {
	            sequencer . stop () ;
	        }
	}
	
	public class MyUpTempoListener implements ActionListener {
	           public void actionPerformed(ActionEvent a) {
	        float tempoFactor = sequencer.getTempoFactor();
	         sequencer.setTempoFactor((float) (tempoFactor * 1.03));
	      }
      }
	
	
	
	
	public class MyDownTempoListener implements ActionListener{
	      public void actionPerformed(ActionEvent a) {
	     float tempoFactor = sequencer.getTempoFactor();
	      sequencer.setTempoFactor((float) (tempoFactor * .97));
	      }
	}
	
	
	
	public class MySendListener implements ActionListener {
	         public void actionPerformed(ActionEvent a) {
	//II make an arraylist of just the STATE of the checkboxes
	          boolean[] checkboxState = new boolean[256] ;
	          for (int i = 0; i < 256; i++) {
	                  JCheckBox check = (JCheckBox)checkboxlist.get(i);
	                  
	             if (check.isSelected()) {
	                  checkboxState[i] = true;
	}
	} 
	String messageToSend = null;
	
	try {
		out.writeObject(username + nextnum++ + ": " + userMessage.getText()) ;
		out.writeObject(checkboxState);
	}catch(Exception ex) {
		System.out.println("Sorry dude. Could not send it to the server.") ;
		}
		userMessage.setText("");
	         }
	}
	  
	
	
	public class MyListSelectionListener implements ListSelectionListener{
	            public void valueChanged(ListSelectionEvent le) {
	              if (!le .getValueIsAdjusting()) {
	                    String selected = (String) Incominglist .getSelectedValue();
	if (selected != null) {
	
	         boolean[] selectedState = (boolean[]) otherSeqsMap.get(selected);
	          changeSequence(selectedState);
	            sequencer.stop();
	              buildTrackAndStart();
	
	                }
	              }
	            }
	        }
	
	public class RemoteReader implements Runnable {
		 boolean[] checkboxState = null;
		  String nameToShow = null ;
		   Object obj = null;
		public void run() {
		      try {
		while((obj=in.readObject()) != null ) {
		           System.out.println("got an object from");
		           System.out.println(obj .getClass());
		          String nameToShow = (String) obj ;
		checkboxState = (boolean[]) in.readObject();
		otherSeqsMap.put(nameToShow, checkboxState) ;
		listVector .add(nameToShow) ;
		Incominglist.setListData(listVector) ;
		}                                     
		      }catch(Exception ex) {ex.printStackTrace();}
		}
	}
	
	
	
	public class MyPlayMineListener implements ActionListener{
		public void actionPerformed(ActionEvent a) {
			if(mySequence != null) {
				sequence = mySequence;
			}
		}
	}
	
	public void changeSequence (boolean[] checkboxState) {
		for (int i = 0; i < 256; i++) {
			JCheckBox check = (JCheckBox) checkboxlist.get(i);
			   if (checkboxState[i]) {
			check .setSelected(true) ;
			   }else {
				   check.setSelected(false);
			   }
		}
	}

	
	
	
	
	public void makeTracks(ArrayList list) {
	Iterator it = list.iterator();
	       for (int i = 0; i < 16 ; i++) {
	         Integer num = (Integer) it.next();
	         if (num != null) {
	              int numKey = num.intValue() ;
	             track.add(makeEvent(144 ,9 ,numKey, 100, i)) ;
	              track .add(makeEvent(128,9,numKey,100, i + 1));
	              
	         }
	       }
	}
	
	public MidiEvent makeEvent(int comd, int chan, int one, int two, int tick) {
		    MidiEvent event = null;
		try {
		     ShortMessage a = new ShortMessage();
		      a.setMessage (comd, chan, one, two);
		       event = new MidiEvent(a, tick);
		}catch (Exception  e) { 
			//e.printstacktrace();
		}
	return event;
}
}
	
